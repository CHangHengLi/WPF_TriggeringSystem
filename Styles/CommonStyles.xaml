<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:TriggerSystemDemo.Converters">

    <!-- 本地定义转换器 -->
    <converters:StringNotEmptyConverter x:Key="StringNotEmptyConverter"/>

    <!-- 文本框基本样式 -->
    <Style x:Key="TextBoxBaseStyle" TargetType="TextBox">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="0,5"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#CCCCCC"/>
        <Setter Property="Background" Value="White"/>
    </Style>

    <!-- 使用属性触发器的文本框样式 -->
    <Style x:Key="ValidatedTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource TextBoxBaseStyle}">
        <Style.Triggers>
            <!-- 属性触发器：鼠标悬停效果 -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#3498db"/>
            </Trigger>
            
            <!-- 属性触发器：获取焦点效果 -->
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="#2980b9"/>
                <Setter Property="BorderThickness" Value="2"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 使用多条件触发器的文本框样式 -->
    <Style x:Key="AdvancedTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource TextBoxBaseStyle}">
        <Style.Triggers>
            <!-- 多条件触发器：同时获取焦点且鼠标悬停 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="#f0f8ff"/>
                    <Setter Property="BorderBrush" Value="#0078d7"/>
                    <Setter Property="BorderThickness" Value="2"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- 使用数据触发器的验证文本框样式 -->
    <Style x:Key="DataValidatedTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource ValidatedTextBoxStyle}">
        <Style.Triggers>
            <!-- 数据触发器：根据绑定的IsValid属性决定边框颜色 -->
            <DataTrigger Binding="{Binding IsUsernameValid}" Value="False">
                <Setter Property="BorderBrush" Value="#e74c3c"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="ToolTip" Value="{Binding UsernameValidationMessage}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PasswordValidatedTextBoxStyle" TargetType="PasswordBox">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="0,5"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#CCCCCC"/>
        <Setter Property="Background" Value="White"/>
        <Style.Triggers>
            <!-- 属性触发器：鼠标悬停效果 -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#3498db"/>
            </Trigger>
            
            <!-- 属性触发器：获取焦点效果 -->
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="#2980b9"/>
                <Setter Property="BorderThickness" Value="2"/>
            </Trigger>
            
            <!-- 数据触发器：使用祖先级绑定 -->
            <DataTrigger Binding="{Binding IsPasswordValid}" Value="False">
                <Setter Property="BorderBrush" Value="#e74c3c"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="ToolTip" Value="{Binding PasswordValidationMessage}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- 自定义按钮样式 - 使用触发器实现各种状态 -->
    <Style x:Key="FancyButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="#3498db"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="15,8"/>
        <Setter Property="Margin" Value="0,10"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- 属性触发器：鼠标悬停 -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#2980b9"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
            
            <!-- 属性触发器：鼠标按下 -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#1f6da3"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0.98" ScaleY="0.98"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <!-- 属性触发器：禁用状态 -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#bdc3c7"/>
                <Setter Property="Foreground" Value="#7f8c8d"/>
                <Setter Property="Opacity" Value="0.7"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 使用EventTrigger的按钮样式 -->
    <Style x:Key="AnimatedButtonStyle" TargetType="Button" BasedOn="{StaticResource FancyButtonStyle}">
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- 事件触发器：鼠标进入时的动画 -->
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation 
                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                            To="1.05" Duration="0:0:0.1"/>
                        <DoubleAnimation 
                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                            To="1.05" Duration="0:0:0.1"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            
            <!-- 事件触发器：鼠标离开时的动画 -->
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation 
                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                            To="1.0" Duration="0:0:0.1"/>
                        <DoubleAnimation 
                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                            To="1.0" Duration="0:0:0.1"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- 复选框样式 -->
    <Style x:Key="FancyCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Margin" Value="0,10"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="#2980b9"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 标题文本块样式 -->
    <Style x:Key="HeaderTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,10,0,5"/>
    </Style>

    <!-- 标签文本块样式 -->
    <Style x:Key="LabelTextBlockStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="0,5,0,2"/>
    </Style>

    <!-- 提示/错误消息文本块样式 -->
    <Style x:Key="ValidationMessageStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="0,2,0,5"/>
        <Setter Property="Foreground" Value="#e74c3c"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <!-- 当消息非空时显示 -->
            <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}, Converter={StaticResource StringNotEmptyConverter}}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- 动画状态示例的样式 -->
    <Style x:Key="AnimationContainerStyle" TargetType="Border">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="100"/>
        <Setter Property="Background" Value="#3498db"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="Margin" Value="0,20"/>
        <Style.Triggers>
            <!-- 多状态动画 -->
            <DataTrigger Binding="{Binding AnimationState}" Value="1">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                                Storyboard.TargetProperty="Background.Color"
                                To="#27ae60" Duration="0:0:0.3"/>
                            <DoubleAnimation 
                                Storyboard.TargetProperty="Width"
                                To="150" Duration="0:0:0.3"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding AnimationState}" Value="2">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                                Storyboard.TargetProperty="Background.Color"
                                To="#9b59b6" Duration="0:0:0.3"/>
                            <DoubleAnimation 
                                Storyboard.TargetProperty="Width"
                                To="100" Duration="0:0:0.3"/>
                            <DoubleAnimation 
                                Storyboard.TargetProperty="Height"
                                To="150" Duration="0:0:0.3"/>
                            <ObjectAnimationUsingKeyFrames 
                                Storyboard.TargetProperty="CornerRadius">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <CornerRadius TopLeft="50" TopRight="5" BottomLeft="5" BottomRight="50"/>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding AnimationState}" Value="0">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation 
                                Storyboard.TargetProperty="Background.Color"
                                To="#3498db" Duration="0:0:0.3"/>
                            <DoubleAnimation 
                                Storyboard.TargetProperty="Width"
                                To="100" Duration="0:0:0.3"/>
                            <DoubleAnimation 
                                Storyboard.TargetProperty="Height"
                                To="100" Duration="0:0:0.3"/>
                            <ObjectAnimationUsingKeyFrames 
                                Storyboard.TargetProperty="CornerRadius">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <CornerRadius>5</CornerRadius>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary> 