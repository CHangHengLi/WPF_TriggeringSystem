<UserControl x:Class="TriggerSystemDemo.Views.ExtendedExamplesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:TriggerSystemDemo.Views"
             xmlns:viewmodels="clr-namespace:TriggerSystemDemo.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <!-- 全局动画定义 -->
        <Storyboard x:Key="buttonAnimation">
            <DoubleAnimation 
                Storyboard.TargetName="animatedButton"
                Storyboard.TargetProperty="Width"
                To="300" 
                Duration="0:0:3"
                AutoReverse="True"
                RepeatBehavior="Forever"/>
        </Storyboard>
    </UserControl.Resources>
    
    <UserControl.DataContext>
        <viewmodels:ExtendedExamplesViewModel/>
    </UserControl.DataContext>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <TextBlock Text="WPF触发器系统扩展示例" 
                   FontSize="20" FontWeight="Bold" 
                   Margin="10"/>
        
        <TabControl Grid.Row="1">
            <!-- 触发器优先级示例 -->
            <TabItem Header="触发器优先级">
                <ScrollViewer>
                    <StackPanel Margin="20">
                        <TextBlock Text="触发器优先级演示" 
                                   FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        
                        <TextBlock TextWrapping="Wrap" Margin="0,0,0,20">
                            <Run>此示例展示了不同属性值来源的优先级。按照WPF中典型的优先级顺序：</Run>
                            <LineBreak/>
                            <Run>1. 动画（最高优先级，当动画活动时）</Run>
                            <LineBreak/>
                            <Run>2. 本地值（直接在元素上设置）</Run>
                            <LineBreak/>
                            <Run>3. 样式触发器（当条件满足时）</Run>
                            <LineBreak/>
                            <Run>4. 模板触发器（当条件满足时，未在此示例中使用）</Run>
                            <LineBreak/>
                            <Run>5. 样式Setter（最低优先级）</Run>
                        </TextBlock>
                        
                        <!-- 触发器优先级演示按钮 -->
                        <Border BorderBrush="Gray" BorderThickness="1" Padding="10" Margin="0,0,0,10">
                            <Button x:Name="priorityButton" Content="触发器优先级演示" Width="200" Height="40">
                                <!-- 本地值设置（第二优先级） -->
                                <Button.Background>LightGray</Button.Background>
                                
                                <!-- 样式设置（低优先级） -->
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <!-- 样式设置值（最低优先级） -->
                                        <Setter Property="Background" Value="Blue"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        
                                        <Style.Triggers>
                                            <!-- 样式触发器（比样式Setter优先级高） -->
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="Green"/>
                                                <Setter Property="FontWeight" Value="Bold"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                                
                                <!-- 事件触发器中的动画（最高优先级，但仅在动画活动期间） -->
                                <Button.Triggers>
                                    <EventTrigger RoutedEvent="Button.Loaded">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation 
                                                    Storyboard.TargetProperty="Background.Color"
                                                    To="Purple" 
                                                    Duration="0:0:2"
                                                    FillBehavior="Stop"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Button.Triggers>
                            </Button>
                        </Border>
                        
                        <TextBlock TextWrapping="Wrap" Margin="0,20,0,10">
                            <Run FontWeight="Bold">解释：</Run>
                            <LineBreak/>
                            <Run>1. 按钮加载时，动画将背景设置为紫色（持续2秒）。此时动画具有最高优先级。</Run>
                            <LineBreak/>
                            <Run>2. 动画结束后（FillBehavior="Stop"），动画效果消失，本地设置的LightGray将生效。</Run>
                            <LineBreak/>
                            <Run>3. 如果点击"移除本地背景值"按钮，本地设置被清除，同时也会清除任何残留的动画效果。</Run>
                            <LineBreak/>
                            <Run>4. 此时鼠标悬停在按钮上时，样式触发器设置的Green将生效；移开鼠标后，样式Setter设置的Blue将生效。</Run>
                        </TextBlock>

                        <Button Content="移除本地背景值" Margin="0,10,0,0" Click="RemoveLocalBackground_Click"/>
                        <Button Content="恢复本地背景值" Margin="0,10,0,0" Click="RestoreLocalBackground_Click"/>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            
            <!-- C#代码中创建触发器 -->
            <TabItem Header="代码创建触发器">
                <ScrollViewer>
                    <StackPanel Margin="20">
                        <TextBlock Text="在C#代码中创建触发器" 
                                   FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        
                        <TextBlock TextWrapping="Wrap" Margin="0,0,0,20">
                            本示例展示如何在C#代码中创建和应用触发器，而不是通过XAML。
                        </TextBlock>
                        
                        <!-- 代码生成的按钮将在这里显示 -->
                        <StackPanel x:Name="codeTriggerPanel" Orientation="Vertical">
                            <Button Content="点击创建按钮" Click="CreateButtonWithTrigger_Click" Margin="0,0,0,10"/>
                        </StackPanel>
                        
                        <Border BorderBrush="Gray" BorderThickness="1" Margin="0,20,0,0" Padding="10">
                            <TextBlock TextWrapping="Wrap">
                                <Run FontWeight="Bold">代码说明：</Run>
                                <LineBreak/>
                                <Run>创建Style对象并添加Setter</Run>
                                <LineBreak/>
                                <Run>创建Trigger对象并配置属性条件</Run>
                                <LineBreak/>
                                <Run>将触发器添加到样式的Triggers集合</Run>
                                <LineBreak/>
                                <Run>创建按钮并应用样式</Run>
                            </TextBlock>
                        </Border>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            
            <!-- 触发动作示例 -->
            <TabItem Header="触发动作">
                <ScrollViewer>
                    <StackPanel Margin="20">
                        <TextBlock Text="触发动作演示" 
                                   FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        
                        <TextBlock TextWrapping="Wrap" Margin="0,0,0,20">
                            本示例展示了不同的触发动作，如BeginStoryboard、PauseStoryboard、
                            ResumeStoryboard和StopStoryboard。
                        </TextBlock>
                        
                        <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                            <StackPanel>
                                <Button x:Name="animatedButton" Content="动画按钮" Width="100" Height="30" Margin="0,0,0,20"/>

                                <!-- 使用事件处理程序的按钮 -->
                                <Button Content="开始动画" Width="150" Margin="0,5" Click="StartAnimation_Click"/>
                                <Button Content="暂停动画" Width="150" Margin="0,5" Click="PauseAnimation_Click"/>
                                <Button Content="恢复动画" Width="150" Margin="0,5" Click="ResumeAnimation_Click"/>
                                <Button Content="停止动画" Width="150" Margin="0,5" Click="StopAnimation_Click"/>
                            </StackPanel>
                        </Border>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            
            <!-- 自定义登录按钮示例 -->
            <TabItem Header="自定义登录按钮">
                <ScrollViewer>
                    <StackPanel Margin="20">
                        <TextBlock Text="自定义登录按钮" 
                                   FontSize="16" FontWeight="Bold" 
                                   Margin="0,0,0,10"/>
                        
                        <TextBlock TextWrapping="Wrap" Margin="0,0,0,20">
                            本示例实现了文档中描述的自定义登录按钮，展示了如何使用触发器创建有特殊视觉效果的按钮。
                        </TextBlock>
                        
                        <StackPanel HorizontalAlignment="Center" Margin="0,20">
                            <Button Content="登录" Width="100" Height="30" Margin="0,10">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <!-- 基本样式 -->
                                        <Setter Property="Background" Value="#3498db"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Padding" Value="10,5"/>
                                        <Setter Property="FontWeight" Value="Bold"/>
                                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="4">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        
                                        <Style.Triggers>
                                            <!-- 鼠标悬停效果 -->
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#2980b9"/>
                                                <Setter Property="Cursor" Value="Hand"/>
                                            </Trigger>
                                            
                                            <!-- 鼠标按下效果 -->
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Background" Value="#1f6da3"/>
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <ScaleTransform ScaleX="0.98" ScaleY="0.98"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                            
                                            <!-- 禁用状态效果 -->
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Background" Value="#bdc3c7"/>
                                                <Setter Property="Foreground" Value="#7f8c8d"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>

                            <!-- 禁用状态的按钮 -->
                            <Button Content="登录(禁用)" Width="100" Height="30" IsEnabled="False" Margin="0,10">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <!-- 与上面相同的样式 -->
                                        <Setter Property="Background" Value="#3498db"/>
                                        <Setter Property="Foreground" Value="White"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Padding" Value="10,5"/>
                                        <Setter Property="FontWeight" Value="Bold"/>
                                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="4">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#2980b9"/>
                                                <Setter Property="Cursor" Value="Hand"/>
                                            </Trigger>
                                            
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Background" Value="#1f6da3"/>
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <ScaleTransform ScaleX="0.98" ScaleY="0.98"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                            
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Background" Value="#bdc3c7"/>
                                                <Setter Property="Foreground" Value="#7f8c8d"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>

                        <TextBlock TextWrapping="Wrap" Margin="0,20,0,0">
                            <Run FontWeight="Bold">按钮状态说明：</Run>
                            <LineBreak/>
                            <Run>- 默认状态：蓝色背景，白色文字</Run>
                            <LineBreak/>
                            <Run>- 鼠标悬停：深蓝色背景，鼠标变为手型</Run>
                            <LineBreak/>
                            <Run>- 鼠标按下：更深的蓝色，轻微缩小按钮制造按压效果</Run>
                            <LineBreak/>
                            <Run>- 禁用状态：灰色背景，灰色文字</Run>
                        </TextBlock>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
        </TabControl>
    </Grid>
</UserControl> 