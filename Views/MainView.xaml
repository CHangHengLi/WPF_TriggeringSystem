<UserControl x:Class="TriggerSystemDemo.Views.MainView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:TriggerSystemDemo.Views"
             xmlns:viewmodels="clr-namespace:TriggerSystemDemo.ViewModels"
             xmlns:converters="clr-namespace:TriggerSystemDemo.Converters"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    
    <UserControl.Resources>
        <converters:StringNotEmptyConverter x:Key="StringNotEmptyConverter"/>
    </UserControl.Resources>
    
    <UserControl.DataContext>
        <viewmodels:MainViewModel/>
    </UserControl.DataContext>
    
    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
        <Grid Margin="20">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- 标题部分 -->
            <StackPanel Grid.Row="0">
                <TextBlock Text="WPF触发器系统MVVM演示" 
                        FontSize="24" FontWeight="Bold" Margin="0,0,0,20"/>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,20">
                    <Run>这个演示展示了WPF中不同类型的触发器系统与MVVM模式的结合：</Run>
                    <LineBreak/>
                    <Run>• 属性触发器 (Property Trigger)</Run>
                    <LineBreak/>
                    <Run>• 数据触发器 (DataTrigger)</Run>
                    <LineBreak/>
                    <Run>• 多条件触发器 (MultiTrigger)</Run>
                    <LineBreak/>
                    <Run>• 事件触发器 (EventTrigger)</Run>
                </TextBlock>
                <Separator Margin="0,10"/>
            </StackPanel>

            <!-- 表单演示部分 -->
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="20"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- 左侧：表单 -->
                <StackPanel Grid.Column="0">
                    <TextBlock Text="用户信息表单" Style="{StaticResource HeaderTextBlockStyle}"/>
                    
                    <!-- 用户名输入(数据触发器验证) -->
                    <TextBlock Text="用户名:" Style="{StaticResource LabelTextBlockStyle}"/>
                    <TextBox Style="{StaticResource DataValidatedTextBoxStyle}"
                             Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Text="{Binding UsernameValidationMessage}" 
                               Style="{StaticResource ValidationMessageStyle}"/>
                    
                    <!-- 密码输入(自定义验证) -->
                    <TextBlock Text="密码:" Style="{StaticResource LabelTextBlockStyle}"/>
                    <PasswordBox x:Name="passwordBox" Style="{StaticResource PasswordValidatedTextBoxStyle}"/>
                    <TextBlock Text="{Binding PasswordValidationMessage}"
                               Style="{StaticResource ValidationMessageStyle}"/>
                    
                    <!-- 电子邮箱(多条件触发器演示) -->
                    <TextBlock Text="电子邮箱(可选):" Style="{StaticResource LabelTextBlockStyle}"/>
                    <TextBox Style="{StaticResource AdvancedTextBoxStyle}"
                             Text="{Binding Email, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Text="{Binding EmailValidationMessage}"
                               Style="{StaticResource ValidationMessageStyle}"/>
                    
                    <!-- 使用属性触发器的复选框 -->
                    <CheckBox Content="订阅我们的新闻邮件" 
                              Style="{StaticResource FancyCheckBoxStyle}"
                              IsChecked="{Binding IsSubscribed}"/>
                    
                    <!-- 使用事件触发器的提交按钮 -->
                    <StackPanel Orientation="Horizontal" Margin="0,20,0,0">
                        <Button Content="提交" Width="100"
                                Style="{StaticResource AnimatedButtonStyle}"
                                Command="{Binding SubmitCommand}"/>
                        <Button Content="重置" Width="100" Margin="10,0,0,0"
                                Style="{StaticResource FancyButtonStyle}"
                                Command="{Binding ResetCommand}"/>
                    </StackPanel>
                </StackPanel>

                <!-- 分隔线 -->
                <Separator Grid.Column="1" Width="1" Background="#CCCCCC" VerticalAlignment="Stretch"/>
                
                <!-- 右侧：动画和触发器演示 -->
                <StackPanel Grid.Column="2">
                    <TextBlock Text="触发器动画演示" Style="{StaticResource HeaderTextBlockStyle}"/>
                    
                    <!-- 使用DataTrigger和EnterActions的动画容器 -->
                    <TextBlock Text="DataTrigger动画状态变化演示：" Style="{StaticResource LabelTextBlockStyle}"/>
                    <Border Style="{StaticResource AnimationContainerStyle}">
                        <TextBlock Text="{Binding AnimationState}" 
                                   HorizontalAlignment="Center" 
                                   VerticalAlignment="Center"
                                   FontSize="24" 
                                   FontWeight="Bold"
                                   Foreground="White"/>
                    </Border>
                    
                    <Button Content="切换状态" Width="100" 
                            Style="{StaticResource FancyButtonStyle}"
                            Command="{Binding AnimateCommand}"/>
                    
                    <TextBlock Text="说明：单击按钮切换动画状态" 
                               FontStyle="Italic" 
                               Margin="0,5,0,20"/>
                    
                    <!-- 属性触发器演示描述 -->
                    <TextBlock TextWrapping="Wrap" Margin="0,20,0,0">
                        <Run>添加的触发器功能：</Run>
                        <LineBreak/>
                        <Run>• 属性触发器：鼠标悬停在控件上会改变边框颜色</Run>
                        <LineBreak/>
                        <Run>• 数据触发器：字段验证失败时显示红色边框</Run>
                        <LineBreak/>
                        <Run>• 多条件触发器：同时获得焦点和鼠标悬停时改变背景</Run>
                        <LineBreak/>
                        <Run>• 事件触发器：鼠标移入按钮时的放大动画</Run>
                    </TextBlock>
                </StackPanel>
            </Grid>
            
            <!-- 底部说明部分 -->
            <StackPanel Grid.Row="2" Margin="0,30,0,0">
                <Separator Margin="0,0,0,10"/>
                <TextBlock TextWrapping="Wrap" FontStyle="Italic">
                    <Run>本演示展示了WPF中触发器系统与MVVM模式的结合使用。</Run>
                    <LineBreak/>
                    <Run>通过触发器可以实现丰富的UI交互效果，同时保持代码与UI的分离。</Run>
                </TextBlock>
            </StackPanel>
        </Grid>
    </ScrollViewer>
</UserControl> 